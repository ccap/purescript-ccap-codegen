// This file is automatically generated. Do not edit.
export const decode_WithParams = function (api) {
  return function(json) {
    if (! (typeof json === 'object' && !Array.isArray(json) && json !== null)) {
      return api.left('This value must be an object');
    }

    let stringTest;
    if (! ('stringTest' in json)) {
      return api.left("Property 'stringTest' does not exist");
    }
    if (typeof json.stringTest !== 'string') {
      return api.left("Property 'stringTest' must be a(n) string");
    }
    stringTest = json.stringTest;

    let intTest;
    if (! ('intTest' in json)) {
      return api.left("Property 'intTest' does not exist");
    }
    if (typeof json.intTest !== 'number' && (json.intTest | 0) === json.intTest) {
      return api.left("Property 'intTest' must be a(n) integer");
    }
    intTest = json.intTest;

    let booleanTest;
    if (! ('booleanTest' in json)) {
      return api.left("Property 'booleanTest' does not exist");
    }
    if (typeof json.booleanTest !== 'boolean') {
      return api.left("Property 'booleanTest' must be a(n) boolean");
    }
    booleanTest = json.booleanTest;

    let decimalTest;
    if (! ('decimalTest' in json)) {
      return api.left("Property 'decimalTest' does not exist");
    }
    decimalTest = api.jsonCodec_primitive_decimal.decode(json.decimalTest);
    if (api.isLeft(decimalTest)) {
      return api.addErrorPrefix("Property 'decimalTest': ")(decimalTest);
    }
    decimalTest = api.fromRight()(decimalTest);

    let stringOpt;
    if (! ('stringOpt' in json)) {
      return api.left("Property 'stringOpt' does not exist");
    }
    if (json.stringOpt === null) {
      stringOpt = api.nothing;
    } else {
      if (typeof json.stringOpt !== 'string') {
        return api.left("Property 'stringOpt' must be a(n) string");
      }
      stringOpt = api.just(json.stringOpt);
    }

    let intOpt;
    if (! ('intOpt' in json)) {
      return api.left("Property 'intOpt' does not exist");
    }
    if (json.intOpt === null) {
      intOpt = api.nothing;
    } else {
      if (typeof json.intOpt !== 'number' && (json.intOpt | 0) === json.intOpt) {
        return api.left("Property 'intOpt' must be a(n) integer");
      }
      intOpt = api.just(json.intOpt);
    }

    let booleanOpt;
    if (! ('booleanOpt' in json)) {
      return api.left("Property 'booleanOpt' does not exist");
    }
    if (json.booleanOpt === null) {
      booleanOpt = api.nothing;
    } else {
      if (typeof json.booleanOpt !== 'boolean') {
        return api.left("Property 'booleanOpt' must be a(n) boolean");
      }
      booleanOpt = api.just(json.booleanOpt);
    }

    let decimalOpt;
    if (! ('decimalOpt' in json)) {
      return api.left("Property 'decimalOpt' does not exist");
    }
    if (json.decimalOpt === null) {
      decimalOpt = api.nothing;
    } else {
      decimalOpt = api.jsonCodec_primitive_decimal.decode(json.decimalOpt);
      if (api.isLeft(decimalOpt)) {
        return decimalOpt;
      }
      decimalOpt = api.just(api.fromRight()(decimalOpt));
    }

    let stringT;
    if (! ('stringT' in json)) {
      return api.left("Property 'stringT' does not exist");
    }
    if (typeof json.stringT !== 'string') {
      return api.left("Property 'stringT' must be a(n) string");
    }
    stringT = json.stringT;

    let intT;
    if (! ('intT' in json)) {
      return api.left("Property 'intT' does not exist");
    }
    if (typeof json.intT !== 'number' && (json.intT | 0) === json.intT) {
      return api.left("Property 'intT' must be a(n) integer");
    }
    intT = json.intT;

    let booleanT;
    if (! ('booleanT' in json)) {
      return api.left("Property 'booleanT' does not exist");
    }
    if (typeof json.booleanT !== 'boolean') {
      return api.left("Property 'booleanT' must be a(n) boolean");
    }
    booleanT = json.booleanT;

    let decimalT;
    if (! ('decimalT' in json)) {
      return api.left("Property 'decimalT' does not exist");
    }
    decimalT = api.jsonCodec_primitive_decimal.decode(json.decimalT);
    if (api.isLeft(decimalT)) {
      return api.addErrorPrefix("Property 'decimalT': ")(decimalT);
    }
    decimalT = api.fromRight()(decimalT);

    let stringOptT;
    if (! ('stringOptT' in json)) {
      return api.left("Property 'stringOptT' does not exist");
    }
    if (json.stringOptT === null) {
      stringOptT = api.nothing;
    } else {
      if (typeof json.stringOptT !== 'string') {
        return api.left("Property 'stringOptT' must be a(n) string");
      }
      stringOptT = api.just(json.stringOptT);
    }

    let intOptT;
    if (! ('intOptT' in json)) {
      return api.left("Property 'intOptT' does not exist");
    }
    if (json.intOptT === null) {
      intOptT = api.nothing;
    } else {
      if (typeof json.intOptT !== 'number' && (json.intOptT | 0) === json.intOptT) {
        return api.left("Property 'intOptT' must be a(n) integer");
      }
      intOptT = api.just(json.intOptT);
    }

    let booleanOptT;
    if (! ('booleanOptT' in json)) {
      return api.left("Property 'booleanOptT' does not exist");
    }
    if (json.booleanOptT === null) {
      booleanOptT = api.nothing;
    } else {
      if (typeof json.booleanOptT !== 'boolean') {
        return api.left("Property 'booleanOptT' must be a(n) boolean");
      }
      booleanOptT = api.just(json.booleanOptT);
    }

    let decimalOptT;
    if (! ('decimalOptT' in json)) {
      return api.left("Property 'decimalOptT' does not exist");
    }
    if (json.decimalOptT === null) {
      decimalOptT = api.nothing;
    } else {
      decimalOptT = api.jsonCodec_primitive_decimal.decode(json.decimalOptT);
      if (api.isLeft(decimalOptT)) {
        return decimalOptT;
      }
      decimalOptT = api.just(api.fromRight()(decimalOptT));
    }

    let ref;
    if (! ('ref' in json)) {
      return api.left("Property 'ref' does not exist");
    }
    ref = api.jsonCodec_ref.decode(json.ref);
    if (api.isLeft(ref)) {
      return api.addErrorPrefix("Property 'ref': ")(ref);
    }
    ref = api.fromRight()(ref);

    let refOpt;
    if (! ('refOpt' in json)) {
      return api.left("Property 'refOpt' does not exist");
    }
    refOpt = api.jsonCodec_refOpt.decode(json.refOpt);
    if (api.isLeft(refOpt)) {
      return api.addErrorPrefix("Property 'refOpt': ")(refOpt);
    }
    refOpt = api.fromRight()(refOpt);

    let anotherRef;
    if (! ('anotherRef' in json)) {
      return api.left("Property 'anotherRef' does not exist");
    }
    anotherRef = api.jsonCodec_anotherRef.decode(json.anotherRef);
    if (api.isLeft(anotherRef)) {
      return api.addErrorPrefix("Property 'anotherRef': ")(anotherRef);
    }
    anotherRef = api.fromRight()(anotherRef);

    let yetAnotherRef;
    if (! ('yetAnotherRef' in json)) {
      return api.left("Property 'yetAnotherRef' does not exist");
    }
    yetAnotherRef = api.jsonCodec_yetAnotherRef.decode(json.yetAnotherRef);
    if (api.isLeft(yetAnotherRef)) {
      return api.addErrorPrefix("Property 'yetAnotherRef': ")(yetAnotherRef);
    }
    yetAnotherRef = api.fromRight()(yetAnotherRef);

    let arrayOfB;
    if (! ('arrayOfB' in json)) {
      return api.left("Property 'arrayOfB' does not exist");
    }
    arrayOfB = api.jsonCodec_arrayOfB.decode(json.arrayOfB);
    if (api.isLeft(arrayOfB)) {
      return api.addErrorPrefix("Property 'arrayOfB': ")(arrayOfB);
    }
    arrayOfB = api.fromRight()(arrayOfB);

    let aC;
    if (! ('aC' in json)) {
      return api.left("Property 'aC' does not exist");
    }
    aC = api.jsonCodec_aC.decode(json.aC);
    if (api.isLeft(aC)) {
      return api.addErrorPrefix("Property 'aC': ")(aC);
    }
    aC = api.fromRight()(aC);

    let xx;
    if (! ('xx' in json)) {
      return api.left("Property 'xx' does not exist");
    }
    xx = api.jsonCodec_xx.decode(json.xx);
    if (api.isLeft(xx)) {
      return api.addErrorPrefix("Property 'xx': ")(xx);
    }
    xx = api.fromRight()(xx);

    let yy;
    if (! ('yy' in json)) {
      return api.left("Property 'yy' does not exist");
    }
    yy = api.jsonCodec_yy.decode(json.yy);
    if (api.isLeft(yy)) {
      return api.addErrorPrefix("Property 'yy': ")(yy);
    }
    yy = api.fromRight()(yy);
    return api.right(
      { stringTest: stringTest
      , intTest: intTest
      , booleanTest: booleanTest
      , decimalTest: decimalTest
      , stringOpt: stringOpt
      , intOpt: intOpt
      , booleanOpt: booleanOpt
      , decimalOpt: decimalOpt
      , stringT: stringT
      , intT: intT
      , booleanT: booleanT
      , decimalT: decimalT
      , stringOptT: stringOptT
      , intOptT: intOptT
      , booleanOptT: booleanOptT
      , decimalOptT: decimalOptT
      , ref: ref
      , refOpt: refOpt
      , anotherRef: anotherRef
      , yetAnotherRef: yetAnotherRef
      , arrayOfB: arrayOfB
      , aC: aC
      , xx: xx
      , yy: yy
      }
    );
  };
};

export const decode_Ref = function (api) {
  return function(json) {
    if (! (typeof json === 'object' && !Array.isArray(json) && json !== null)) {
      return api.left('This value must be an object');
    }

    let intTest;
    if (! ('intTest' in json)) {
      return api.left("Property 'intTest' does not exist");
    }
    if (typeof json.intTest !== 'number' && (json.intTest | 0) === json.intTest) {
      return api.left("Property 'intTest' must be a(n) integer");
    }
    intTest = json.intTest;

    let somethingA;
    if (! ('somethingA' in json)) {
      return api.left("Property 'somethingA' does not exist");
    }
    somethingA = api.jsonCodec_somethingA.decode(json.somethingA);
    if (api.isLeft(somethingA)) {
      return api.addErrorPrefix("Property 'somethingA': ")(somethingA);
    }
    somethingA = api.fromRight()(somethingA);
    return api.right(
      { intTest: intTest
      , somethingA: somethingA
      }
    );
  };
};

export const decode_RecordOfOther = function (api) {
  return function(json) {
    if (! (typeof json === 'object' && !Array.isArray(json) && json !== null)) {
      return api.left('This value must be an object');
    }

    let x;
    if (! ('x' in json)) {
      return api.left("Property 'x' does not exist");
    }
    if (typeof json.x !== 'number' && (json.x | 0) === json.x) {
      return api.left("Property 'x' must be a(n) integer");
    }
    x = json.x;

    let y;
    if (! ('y' in json)) {
      return api.left("Property 'y' does not exist");
    }
    if (typeof json.y !== 'number' && (json.y | 0) === json.y) {
      return api.left("Property 'y' must be a(n) integer");
    }
    y = json.y;
    return api.right(
      { x: x
      , y: y
      }
    );
  };
};
