scala: test.Printed
purs: Test.Printed
import Imported
type YesNo: Boolean
type Number: Decimal
type Text: String
type Integer: Int
type TagType: wrap Int
type Optional: Maybe Int
type Collection: Array Int
type Point: {
  x: Int,
  y: Int,
}
type InternalRef: Integer
type ExternalRef: Imported.ImportedType
type Validated: String
  <validations maxLength="5">
type ValidatedMaybe: Maybe String
  <validations maxLength="5">
type ValidatedRec: {
  name: String
    <validations maxLength="5">
}
type ArrayOfArrayOfArrayString: Array (Array (Array String))
type ArrayOfSomething a: Array a
type Either a b: [
  | Left a
  | Right b
]
type EitherWithStringError a: Either String a
type List a: [
  | Nil
  | Cons a (List a)
]
type Tuple a b: [
  | Tuple a b
]
type NonEmptyList a: Tuple a (List a)
type AnotherNonEmptyList a: {
  head: a,
  tail: List a,
}
type NonEmptyArray a: Tuple a (Array a)
type Enum: [
  | Red
  | Green
  | Blue
]
type RecordOfStrings: {
  a: List String,
  b: List String
    <foo x="y">
  c: List String,
}
type NativeEither a b: wrap (Either a b)
  <scala t="scala.Either" decode="Decoder.either" encode="Encoder.either">
  <purs t="Data.Either" decode="Ccap.Common.Either.fromCodegenEither" encode="Ccap.Common.Either.toCodegenEither">
