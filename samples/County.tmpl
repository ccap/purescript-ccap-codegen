/*
 * An example template file
 */

// - A template file consists of one module.
// - A module consists of one or more type declarations.
// - Non-primitive type and module names are camel-case with an initial upper-case letter.
// - Any type can be marked as Maybe (Maybe in PureScript, Option in Scala)
// - Any type can be tagged with wrap (newtype in PureScript, Scalaz @@ in Scala)
//
// The following primitive types are supported:
//   - Boolean
//   - Int
//   - Decimal
//   - String
//
// Record types:
//   - Contain one one or more properties.
//   - Property names are camel-case with an initial lower-case letter.
//   - Record types must be given a name to be nested within a record or used
//     in an Array type.
//

Test.Generated.County
Test.Generated.County

type CountyNo: Domains.CountyNoT
type CountyName: String <validations maxLength="32">
type OtherCountyName: wrap String <validations maxLength="32">
type AssessFacilityId: wrap Int
type SomethingMoney: wrap Decimal

type County: {
  countyNo: Domains.CountyNoT
  countyNoX: CountyNo
  countyName: CountyName
  assessFacilityId: Maybe AssessFacilityId
  soapPort: Int
}

type Big: {
  a1: Int
  b1: String
  c1: Decimal
  d1: Boolean
  a2: Int
  b2: String
  c2: Decimal
  d2: Boolean
  a3: Int
  b3: String
  c3: Decimal
  d3: Boolean
  a4: Int
  b4: String
  c4: Decimal
  d4: Boolean
}

type Response: {
  counties: Array County
}

type CountyEnum: [
  | Adams
  | Ashland
  | Baron
  | Etc
]
